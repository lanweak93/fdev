spring.data.mongodb.uri=
logging.level.org.springframework.data.mongodb.core.MongoTemplate: INFO
#用户管理模块认证地址
userManager.url=
#不需要进行用户认证的requestURI（不带上下文根，”;”分割）
no.filter.urls=/api/releasenode/getReleaseNodeName;/actuator
#权限验证开关，true为开启
fdev.role.control.enabled=true


# excel模板minio根路径
excel.template.minio.url=/excel-template-pro/
# 变更文件minio地址
prod.record.minio.url=/testassets-pro/
# 投产需求文件minio地址
release.rqrmnt.minio.url=/release-rqrmnt-pro/

spring.redis.timeout=6000ms
spring.redis.cluster.nodes=
spring.redis.password=
spring.redis.lettuce.pool.min-idle=5
spring.redis.lettuce.pool.max-idle=20
spring.redis.lettuce.pool.max-active=100
spring.redis.lettuce.pool.max-wait=-1

#非必要，redis缓存开启开关，默认不配置为false（关闭状态），true为开启。
redisCacheEnable=true
#邮件发送开关，true为开启
fdev.email.control.enabled=true
req.long.message.log.switch=false
link.port=8080

#自动化发布脚本目录
scripts.path=/fdev/scripts/
# 本地准备介质临时目录(自动化发布脚本使用)
autorelease.tmp.dir=/fdev/imagecache/autorelease/
# gitlab地址(自动化发布脚本使用)
gitlab.url=
# 自动化发布服务器ip
autorelease.server.host=
# 自动化发布服务器用户
autorelease.server.user=devops
# 自动化发布服务器密码
autorelease.server.password=devops
# 自动化发布服务器介质根目录
autorelease.server.root.dir=/devops     
# 需dos转unix的文件类型
dos2unix.filetypes=.sh,.sql,.properties,.xml,.ascii
# 保存缓存镜像路径
cache.image.dir=/fdev/imagecache/
# docker镜像仓库用户名
docker.repository.user=ebank
# docker镜像仓库密码
docker.repository.password=
#直推镜像空间ip
autorelease.docker.push.registry=

# 网银网段fdev与自动化发布环境映射关系（生产）
fdev.autorelease.dmz.env.product.mapping={"rel1-dmz":"DEV","tcyz-test":"TEST","sh-k1-dmz":"PROCSH","hf-k1-dmz":"PROCHF"}
# 网银网段fdev与自动化发布环境映射关系（灰度）
fdev.autorelease.dmz.env.gray.mapping={"rel1-dmz":"DEV","tcyz-test":"TEST","sh-k1-dmz-gray":"PROCSH","hf-k1-dmz-gray":"PROCHF"}

# 业务网段fdev与自动化发布环境映射关系（生产）
fdev.autorelease.biz.env.product.mapping={"rel1-biz":"DEV","tcyz-test":"TEST","sh-k1-biz":"PROCSH","hf-k1-biz":"PROCHF"}
# 业务网段fdev与自动化发布环境映射关系（灰度）
fdev.autorelease.biz.env.gray.mapping={"rel1-biz":"DEV","tcyz-test":"TEST","sh-k1-biz-gray":"PROCSH","hf-k1-biz-gray":"PROCHF"}

########### gitlab config   ###########
gitlab.rootUrl=
gitlab.api.url=
gitlab.manager.username=fdev
gitlab.manager.password=
# gitlab管理员Token
gitlab.manager.token=

########### email config   ###########
send.email.from=
send.email.smtpServer.host=
send.email.smtpServer.port=9025
send.email.username=fdevsrv1
send.email.password=

fdev.app.domain=
fdev.envconfig.domain=
fdev.task.domain=
fdev.user.domain=
fdev.notify.domain=
fdev.rqrmnt.domain=
fdev.torder.domain=
fdev.docmanage.domain=
fdev.demand.domain=
fdev.fblue.domain=
fdev.interface.domain=
fdev.component.domain=

demand.file.minio.uri=

# fdev-runner相关配置
fdev.runner.kafka.topic=fdev-runner-topic
imagecache.timeout=30
imagecache.scripts.hostpath=/fdevnas/frelease/master/scripts/
imagecache.save.hostpath=/fdevnas/frelease/master/imagecache/


spring.sleuth.messaging.kafka.enabled = false
# 配对应环境的kafka
spring.kafka.bootstrap-servers=

topicName=merge-pro

fdev.caas.registry.pro=

# 系统内部错误消息通知人员以“|”隔开
notice.managers=

# 卡点配置
userStuckPoint.RoleId=
userStuckPoint.url=

task.file.resource=fdev-resources
docmanage.file.url=


# 镜像推送与介质准备配置
fdev.media.topic=super-runner-docker-pro
fdev.release.branch=master
fdev.release.projectId=3872
fdev.release.gitHttpUrl=
fdev.release.projectName=fdev-release-pythonscripts
fdev.release.releaseImageName=

system.route.dir=master

# 介质目录可选项
prod.dir=docker,docker_stop,docker_stopall,docker_startall,docker_restart,docker_yaml,scc,scc_stop,scc_restart,scc_startall,scc_stopall,scc_yaml


# docker_yaml网段
fdev.dmz.mapping=
fdev.biz.mapping=


#目录对应的属性
fdev.sccDir.key.mapping={ "scc":["sccdeploy_namespace","sccdeploy_clusterlist","dockerservice_namespace"],"scc_startall":["sccdeploy_namespace","sccdeploy_clusterlist","scc_replicas"],"scc_stop":["sccdeploy_namespace","sccdeploy_clusterlist"],"scc_stopall":["sccdeploy_namespace","sccdeploy_clusterlist"],"scc_all":["sccdeploy_namespace","sccdeploy_clusterlist","dockerservice_namespace"],"scc_restart":["sccdeploy_namespace","sccdeploy_clusterlist"],"scc_yaml":["sccdeploy_namespace","sccdeploy_clusterlist","dockerservice_namespace"],"scc_scale":["sccdeploy_namespace","sccdeploy_clusterlist"]}
fdev.dockerDir.key.mapping={"docker":["fdev_caas_tenant","fdev_caas_registry_namespace","fdev_caas_registry_user"],"docker_startall":["fdev_caas_tenant","yaml_extend_num"],"docker_stop":["fdev_caas_tenant"],"docker_stopall":["fdev_caas_tenant"],"docker_all":["fdev_caas_tenant","fdev_caas_registry_namespace","fdev_caas_registry_user"],"docker_restart":["fdev_caas_tenant"],"docker_yaml":["fdev_caas_tenant","fdev_caas_registry_namespace", "fdev_caas_user","fdev_caas_registry_user"],"docker_scale":["fdev_caas_tenant"]}


#SDK_GK获取的url
sdk.gk.url=h

#scc生产环境网银网段介质目录映射
fdev.autorelease.dmz.env.scc.map={"scc-pro-uz11":"PROCSHSCCK1","scc-pro-uz12":"PROCSHSCCK2","scc-pro-uz31":"PROCHFSCCK1","scc-pro-uz32":"PROCHFSCCK2","scc-auto":"DEVSCC","scc-csauto":"TESTSCC"}
#scc灰度环境网银网段介质目录映射
fdev.autorelease.dmz.env.gray.scc.map={"scc-gray-uz10":"PROCSHSCCHD","scc-gray-uz30":"PROCHFSCCHD","scc-auto":"DEVSCC","scc-csauto":"TESTSCC"}
#scc生产环境业务网段介质目录映射
fdev.autorelease.biz.env.scc.map=
#scc灰度环境业务网段介质目录映射
fdev.autorelease.biz.env.gray.scc.map=

# nacos环境配置
#SIT
nacos.sit.url=
#UAT 
nacos.uat.url=
#REL 
nacos.rel.url=
#qy压测
nacos.qy.url=
#cp
nacos.cp.url=
nacos.nacosUserName=fdev_nacos
nacos.nacosPassword=
nacos.nacosGroup=per_xrouter

repo.down.path=/fdev/frelease/

aws.bucketName=mobper-staticresource

auth.jwt.token.secret=

release.git.special.url=

release.deploy.url=

#manufacture ldap
manufacture.spring.ldap.urls=
manufacture.spring.ldap.base=DC=DEV,DC=SPDB,DC=com
manufacture.spring.ldap.dn=
manufacture.spring.ldap.password=

#spdb ldap
spdb.spring.ldap.urls=
spdb.spring.ldap.base=DC=HDQ,DC=SPDB,DC=com
spdb.spring.ldap.dn=
spdb.spring.ldap.password=

spdb.operation.hdq.number=
